---
name: Generate konflux configurations

on:
  push:
  workflow_dispatch: # Manual workflow trigger

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build-matrix:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the repository
        uses: actions/checkout@v4
      - id: set-matrix
        run: |
          APPLICATIONS=$(ls config/konflux/openshift-pipelines-*.yaml | jq -R -s -c 'split("\n")[:-1]')
          echo "applications: $(echo ${APPLICATIONS} | jq)"
          echo "applications=${APPLICATIONS}" >> $GITHUB_OUTPUT
    outputs:
      applications: ${{ steps.set-matrix.outputs.applications }}
  update-projects:
    needs: build-matrix
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        application: ${{ fromJSON(needs.build-matrix.outputs.applications) }}
    permissions:
      contents: write
      pull-requests: write
    steps:
    - name: Checkout the repository
      uses: actions/checkout@v4
    - uses: actions/setup-go@v5
      with:
        go-version: 1.22.x
    - name: Generate configurations and pull-requests
      run: |
        gh auth status
        gh auth setup-git
        
        go run ./cmd/konflux/ ${{matrix.application}}
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    - name: Commit new changes
      run: |
        BASE_BRANCH=${GITHUB_REF#refs/heads/}
        SOURCE_BRANCH=actions/update/hack-update-konflux-${BASE_BRANCH}
        git config user.name openshift-pipelines-bot
        git config user.email pipelines-extcomm@redhat.com
        git checkout -b ${SOURCE_BRANCH}

        git add -f .konflux

        if [[ -z $(git status --porcelain --untracked-files=no) ]]; then
          echo "No change, exiting"
          exit 0
        fi

        git commit -F- <<EOF
          [bot:${BASE_BRANCH}] Update Generated Konflux Config
        EOF

        git push -f origin ${SOURCE_BRANCH}

        if [ "$(gh pr list --base ${BASE_BRANCH} --head ${SOURCE_BRANCH} --json url --jq 'length')" = "0" ]; then
          echo "creating PR..."
          gh pr create -B ${BASE_BRANCH} -H ${SOURCE_BRANCH} --label=automated   --fill
        fi
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
