package konflux

import (
	"context"
	"errors"
	"fmt"
	"io/fs"
	"log"
	"os"
	"path/filepath"
	"strings"
)

const baseBranchPrefix = "hack/"

func cloneAndCheckout(ctx context.Context, repo Repository, targetDir string) (string, error) {
	branch := repo.Branch.Name
	branchPrefix := baseBranchPrefix + repo.Application.Name + "/"
	dir := filepath.Join(targetDir, repo.Application.Version.Version, repo.Name)
	exists, err := exists(filepath.Join(dir, ".git"))

	if err != nil {
		return dir, err
	}
	if exists {
		// Repository exists, fetch the latest changes
		if out, err := run(ctx, dir, "git", "fetch", "origin", "-p", "--progress"); err != nil {
			return dir, fmt.Errorf("failed to fetch repository: Error: %v, Output: %v", err, out)
		}
	} else {
		// Repository does not exist, clone the repository
		if err := os.MkdirAll(dir, 0755); err != nil {
			return "", err
		}
		if out, err := run(ctx, dir, "git", "clone", repo.Url, "."); err != nil {
			return dir, fmt.Errorf("failed to clone repository: %s, %s", err, out)
		}
	}

	if out, err := run(ctx, dir, "git", "reset", "--hard", "HEAD", "--"); err != nil {
		return dir, fmt.Errorf("failed to reset %s branch: %s, %s", branch, err, out)
	}
	out, err := run(ctx, dir, "git", "ls-remote", "--heads", "origin", branch)
	if err != nil {
		return dir, fmt.Errorf("failed to reset %s branch: %s, %s", branch, err, out)
	}
	if len(out) == 0 {
		if _, err := run(ctx, dir, "git", "switch", "-C", branch, "origin/next"); err != nil {
			if out, err := run(ctx, dir, "git", "switch", "-C", branch, "origin/main"); err != nil {
				return dir, fmt.Errorf("failed to checkout branch for PR: %s, %s", err, out)
			}
		}
		if out, err := run(ctx, dir, "git", "push", "-u", "origin", branch); err != nil {
			return dir, fmt.Errorf("failed to create branch for PR: %s, %s", err, out)
		}
	}
	if out, err := run(ctx, dir, "git", "checkout", "origin/"+branch, "-B", branch); err != nil {
		return dir, fmt.Errorf("failed to checkout %s branch: %s, %s", branch, err, out)
	}
	if out, err := run(ctx, dir, "git", "checkout", "-B", branchPrefix+branch); err != nil {
		return dir, fmt.Errorf("failed to checkout branch for PR: %s, %s", err, out)
	}
	return dir, nil
}

func commitAndPullRequest(ctx context.Context, repo Repository, dir string) error {
	branchPrefix := baseBranchPrefix + repo.Application.Name + "/"
	base := repo.Branch.Name
	head := branchPrefix + base

	if out, err := run(ctx, dir, "git", "status", "--porcelain"); err != nil {
		return fmt.Errorf("failed to check git status: %s, %s", err, out)
	} else if string(out) == "" {
		log.Printf("[%s] No changes, skipping commit and PR", dir)
		return nil
	}
	if out, err := run(ctx, dir, "bash", "-c", "git config user.name openshift-pipelines-bot; git config user.email pipelines-extcomm@redhat.com"); err != nil {
		return fmt.Errorf("failed to set some git configurations: %s, %s", err, out)
	}
	if out, err := run(ctx, dir, "git", "add", "."); err != nil {
		return fmt.Errorf("failed to add: %s, %s", err, out)
	}
	if out, err := run(ctx, dir, "git", "commit", "-m", fmt.Sprintf("[bot:%s] update konflux configuration", base)); err != nil {
		return fmt.Errorf("failed to commit: %s, %s", err, out)
	}
	if out, err := run(ctx, dir, "git", "push", "-f", "origin", head); err != nil {
		return fmt.Errorf("failed to push: %s, %s", err, out)
	}

	cmd := fmt.Sprintf("gh pr list --base %s --head %s --json number --jq '.[0].number'", base, head)
	out, err := run(ctx, dir, "bash", "-c", cmd)

	if err != nil {
		return fmt.Errorf("failed to check if a pr exists: %s, %s", err, out)
	}
	prNumber := strings.TrimSpace(string(out))
	if prNumber == "" {
		fmt.Printf("No PR found for %s, Creating ", head)
		if out, err := run(ctx, dir, "gh", "pr", "create",
			"--base", base,
			"--head", head,
			"--label=hack", "--label=automated",
			"--title", fmt.Sprintf("[bot:%s] update konflux configuration", head),
			"--body", "This PR was automatically generated by the konflux command from openshift-pipelines/hack repository"); err != nil {
			return fmt.Errorf("failed to create the pr: %s, %s", err, out)
		}
	} else {
		log.Printf("[%s] PR already exists, Updating", out)
		if out, err := run(ctx, dir, "gh", "pr", "edit", prNumber,
			//"--label=hack", "--label=automated",
			"--title", fmt.Sprintf("[bot:%s] update konflux configuration", head),
		); err != nil {
			return fmt.Errorf("failed to edit the pr: %s, %s", err, out)
		}
	}
	return nil
}

func exists(path string) (bool, error) {
	_, err := os.Stat(path)
	if err == nil {
		return true, nil
	}
	if errors.Is(err, fs.ErrNotExist) {
		return false, nil
	}
	return false, err
}
